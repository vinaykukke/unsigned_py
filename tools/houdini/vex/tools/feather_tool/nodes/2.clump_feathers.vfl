#include <feather_tool.h>

float u_start = chf("u_start");
float u_end = chf("u_end");
float random_number = i@pid + int(rand(i@pid + 1111) * 1111);
int seed = chi("seed");
int max_clump = chi("max_clump");
float min_angle = chf("min_angle");
float max_angle = chf("max_angle");
float angle_right = fit01(rand(i@pid + random_number + seed * 3333) * 3333, min_angle, max_angle);
float angle_left = fit01(rand(i@pid + random_number + seed * 4444) * 4444, min_angle, max_angle);
vector rotation_axis = normalize(cross(normalize(v@dir), normalize(v@edge_dir)));

f[]@u_pos_right;
f[]@u_pos_left;
i[]@pts;
f@sum_of_all_angles;
f@clump_num_right = fit01(rand(i@pid + random_number + seed * 3), 1, max_clump);
f@clump_num_left = fit01(rand(i@pid + random_number + seed * 9), 1, max_clump);

float clump_num = i@side == 1 ? @clump_num_right : @clump_num_left;
float u_pos_side[] = i@side == 1 ? @u_pos_right : @u_pos_left;
float angle = i@side == 1 ? angle_right : angle_left;

float u_pos;
vector pos;
float u_inc = (u_end - u_start) / clump_num; 
float loop_inc = u_start + u_inc;
float loop_start = u_start;

/** Find the clump position */
for (int i = 0; i < clump_num; i++)  {
    u_pos = fit01(rand(i@pid + random_number + seed), loop_start, loop_inc);
    append(u_pos_side, u_pos);
    loop_start += u_inc;
    loop_inc += u_inc;
}

/** Extract the 3D position from the u_pos */
foreach (float val; u_pos_side) {
    int prev_pts = @pts[len(@pts) - 1];
    /** Get the position from the primitive and store in pos */
    prim_attribute(0, pos , "P", @primnum, val, 0);
    int pt = nearpoint(0, pos);

    if (i@side == 1) {
        /** If our near point is the same as the prev point then add 1 */
        if (prev_pts == pt || pt % 2 != 0) {
            pt += 1;
        }
    } else {
        /** If our near point is the same as the prev point then add 1 */
        if (prev_pts == pt || pt % 2 == 0) {
            pt += 1;
        }
    }

    
    append(@pts, pt);
}

/** 
 * Basically take all the clump points (pts) and to that array
 * add the first and last point of the feather barb (primitive or pid)
 * and then find points on each primitive
 */
int prim_points[] = primpoints(0, i@pid);
/** Trying to be non destructive */
i[]@check_pts = @pts;
/** Insert the 1st point of each primitive into check_pts */
insert(@check_pts, 0, min(prim_points));
/** Inset the last point of each primitive into the check_pts */
append(@check_pts, max(prim_points));

/** Calculate the angle */
foreach (int i; i[]@pts){
    if (@ptnum > i) {
        @sum_of_all_angles += angle;
        
        if (@sum_of_all_angles >= 90) {
            angle = 0;
        }
        /** Rotation applied only once */
        vector4 rotation = quaternion(radians(angle), rotation_axis);
        v@dir = qrotate(rotation, v@dir);
    }
}